/* AST node diagram generator script collection for M2C, M2J and M2Sharp.
 *
 * Copyright (c) 2016 The Modula-2 Software Foundation
 *
 * Author & Maintainer: Benjamin Kowarsch <org.m2sf>
 *
 * @synopsis
 *
 * The M2C, M2J and M2Sharp compilers are multi-dialect Modula-2 translators
 * and compilers respectively targeting C99, Java/JVM and C#/CLR, sharing a
 * common abstract syntax tree (AST) specification.
 *
 * The AST node diagram generator script collection consists of Graphviz DOT
 * descriptions for all AST node types of the common AST specification.
 *
 * The Graphviz dot utility is required to generate the diagrams. 
 * It may be obtained from http://www.graphviz.org/download.php.
 *
 * @repository
 *
 * https://github.com/m2sf/m2-ast-node-diagrams
 *
 * @file
 *
 * defmod.dot
 *
 * DEFMOD node diagram.
 *
 * Usage: $ dot defmod.dot -Tps > defmod.ps
 *
 * @license
 *
 * This is free software: you can redistribute and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) either version 2.1
 * or at your choice version 3 as published by the Free Software Foundation.
 * However, you may not alter the copyright, author and license information.
 *
 * It is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Read the license for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License.
 * If not, see <https://www.gnu.org/copyleft/lesser.html>.
 *
 * NB: Components in the domain part of email addresses are in reverse order.
 */

/*** Definition Module Node ***/

digraph DEFMOD {
  graph [orientation=landscape,fontname=helvetica];
  node [fontname=helvetica,fontsize=10,shape=box,height=0.25];
    
  DEFMOD -> id0;
  id0 [label="IDENT"];
  id0 -> moduleIdent;
  moduleIdent [style=filled,fillcolor=lightgrey];
  
  node [style=invis]; edge [style=invis];
  DEFMOD -> ___veryLongDummy0___;
  node [style=solid]; edge [style=solid];
  
  DEFMOD -> importList;
  
  node [style=invis]; edge [style=invis];
  DEFMOD -> ___veryLongDummy1___;
  node [style=solid]; edge [style=solid];
  
  DEFMOD -> definitionList;
  
  node [style=solid];
  edge [arrowhead=none];
  importList [style=rounded];
  importList -> { IMPLIST empty0 };
  empty0 [label="EMPTY"];
  edge [arrowhead=normal];
  
  node [style=rounded];
  IMPLIST -> { imp0 imp1 imp2 };
  edge [style=invis]; node [width=0]; nodesep=0;
  IMPLIST -> ellipsis0;
  edge [style=solid]; node [width=0.75]; nodesep=0.25;
  IMPLIST -> impN;
  imp0 [label="import-0"];
  imp1 [label="import-1"];
  imp2 [label="import-2"];
  ellipsis0 [label="..."];
  ellipsis0 [shape=none];
  impN [label="import-N"];
  
  node [style=solid];
  edge [arrowhead=none];
  definitionList [style=rounded];
  definitionList -> { DEFLIST empty1 };
  empty1 [label="EMPTY"];
  edge [arrowhead=normal];
    
  node [style=rounded];
  DEFLIST -> { defn0 defn1 defn2 };
  edge [style=invis]; node [width=0]; nodesep=0;
  DEFLIST -> ellipsis1;
  edge [style=solid]; node [width=0.75]; nodesep=0.25;
  DEFLIST -> defnN;
  defn0 [label="defn-0"];
  defn1 [label="defn-1"];
  defn2 [label="defn-2"];
  ellipsis1 [label="..."];
  ellipsis1 [shape=none];
  defnN [label="defn-N"];
}

/* END OF FILE */